/*
 * THIS IS AN AUTOGENERATED FILE.  DO NOT MODIFY BY HAND!
 * Created by propertiesGen_new.py 0000 2019-04-30 01:33:00 claude
 * Generated 2019-10-01 19:05:43
 * Edit WPProperties.meta and rerun as follows:
 *     ../../libs/utils/propertiesGen_new.py WP
 */

/** @file WPProperties.h 
 * @brief This auto-generated file consists of header information for the WPProperties class.*/

#ifndef __WPProperties_h
#define __WPProperties_h

#include <string>           // std::string
#include <set>              // std::set

#include "GetProp.h"        // GetProp

class WPProperties : public GetProp {

	protected:
		static WPProperties *handle; /**< pointer handle to class instance if using getInstance function*/
		std::string m_sPrefix; /**< qualifier string used to differentiate multiple instances of a given included properties class. In the meta file, included classes may be given qualifer names if more than one instance is needed. In this case, variables for the included properties classes are defined in the configuration file using qualifier.variable. The m_sPrefix variable is used to hold the prefix (qualifier.) information to the variable name as required.*/
		std::set<std::string> metalist; /**< complete list of class variables defined in meta file*/
		int missing; /**< number of variables not read from configuration file (therefore default will be used)*/

		int dups; /**< number of variables in all properties classes that are duplicated, and will therefore be assigned the same config file value*/

		void checkVars();

		// included properties classes

		// properties from meta file
		std::string _cmsconfigfile;                /**< CMS config for recenter notification, use false to disable */
		std::string _channelblacklist;             /**< channels to be dropped by WPlib, use none to disable */
		std::string _channelfile;                  /**< text file with channel information */
		std::string _channelfilter;                /**< limit to only using channels e.g. HH|HN|HL */
		std::string _channelgreylist;              /**< channels to be dropped by application, use none to disable */
		bool   _doreplay;                     /**< replay from tankfile using ewfeeder module */
		std::string _eewchannel;                   /**< CMS notification topic, use false to disable */
		std::string _ewconfig;                     /**< config file for earthworm params */
		bool   _flrtfeed;                     /**< flag for file feed to determine if replay should be close to real time */
		bool   _fldebug;                      /**< when debug is true sac files will be written, one per channel per hour */
		std::string _flfile;                       /**< file containing the list of files to be processed by file feeder */
		int    _flpktlen;                     /**< desired packet length during file feed */
		std::string _ifid;                         /**< network device for multicast */
		int    _ignorefirstpackets;           /**< number of packets to ignore after a gap, use -1 to disable gap checking */
		std::string _multicastaddress;             /**< for multicast */
		int    _packetlatencythreshold;       /**< Drop packets older than this threshold (seconds), use 0 to disable.  Negative for debug print.  Default is 0. */
		std::string _qmamulticastaddress;          /**< for multicast */
		int    _readintervalblackgreylist;    /**< Interval in seconds to wait before checking black and grey lists for any changes. Use value 0 to disable subsequent refresh */
		int    _readintervalwhitelist;        /**< Interval in seconds to wait before checking white list for any change. Use value 0 to disable subsequent refresh */
		std::string _replayfile;                   /**< tankfile replay file name, must be zipped (.gz extension) */
		bool   _replayrealtime;               /**< mimic real time */
		int    _threadcount;                  /**< max number of threads allowed when processing packets */
		double _velocitythreshold;            /**< default clipping threshold for velocity if unknown */

	public:
		WPProperties() {};
/** function auto-generated and initialises the class using a passed GetProp instance (handles config file reading).
* @param gp is a GetProp instance handle.
* @param qual is a qualifier string [optional] which affects config file interpretation for multiple included property class instances.*/
		WPProperties(GetProp& gp, std::string qual = "") : GetProp(gp) {if (qual.length() > 0) {m_sPrefix = qual + ".";} else {m_sPrefix = "";}}; // constructor

		static WPProperties* getInstance();

		static WPProperties* destroyInstance();

/** function auto-generated and reads information from configuration files, calls functions to populate variables and check expected/read variables.
* @param filename string configuration file.
* @param argc number of command line arguments over-riding configuration file.
* @param argv command line arguments over-riding configuration file. */
		void init(std::string, int argc = 0, char* argv[] = NULL) throw(Error);
/** function auto-generated and populates variables (and metalist) from information read from the configuration file. */
		void init() throw(Error);
/** function auto-generated and sets handle of class to provided pointer. @param pHandle pointer to instance of WPProperties class*/
		void sethandle(WPProperties* pHandle);

		std::vector<std::string> getPropListNames();

/** function auto-generated and returns number of configurable parameters duplicated. @return _dups int*/
		int getDups() const;

/** function auto-generated and returns number of configurable parameters missing in configuration file (defaults used). @return _missing int*/
		int getMissing() const;

/** function auto-generated and returns prefix/qualifier for properties class. @return m_sPrefix string*/
		std::string getPrefix() const;

/** function auto-generated and runs unittest for member variables */
		std::string unittest();

		std::string getCMSConfigFile() const;
		int getThreadCount() const;
		int getIgnoreFirstPackets() const;
		std::string getFLfile() const;
		std::string getIFID() const;
		bool getDoReplay() const;
		int getPacketLatencyThreshold() const;
		std::string getMulticastAddress() const;
		std::string getEWConfig() const;
		double getVelocityThreshold() const;
		int getReadIntervalBlackGreyList() const;
		bool getReplayRealTime() const;
		std::string getChannelFilter() const;
		bool getFLRTfeed() const;
		int getReadIntervalWhiteList() const;
		std::string getChannelBlackList() const;
		int getFLpktlen() const;
		std::string getEEWChannel() const;
		std::string getReplayFile() const;
		bool getFLdebug() const;
		std::string getQMAMulticastAddress() const;
		std::string getChannelGreyList() const;
		std::string getChannelFile() const;

		// entry point for self unit test
		static int main(int argc, char* argv[]);

}; // class WPProperties

// rcsid version strings
#define RCSID_WPProperties_h "$Id: WPProperties.h auto-generated 2019-10-01 19:05:43 from WPProperties.meta using propertiesGen_new.py 0000 2019-04-30 01:33:00 claude $"
extern const std::string RCSID_WPProperties_cc;

#endif

// end of file: WPProperties.h
