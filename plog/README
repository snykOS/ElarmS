$Id$

Plog for ShakeAlert -- Header Only Thread Safe C++ Logging Library
Last Modified: 2018-01-19
By: Garret Hartman ghartman@gps.caltech.edu

------------------------------------------------

Original Source from: https://github.com/SergiusTheBest/plog
Checked Out Release Version: 1.1.3
Release Date: Aug 9, 2017

Updates:
    Update from version 1.1.2 to 1.1.3 on 2018-01-19
        -- Introduces bug fixes to the IF_LOG macro and plog::none severity code

For more detailed instructions on how to use the plog library see the ShakeAlert Trac Wiki Page On 
    Software Logging at: https://eew-repo.wr.usgs.gov/trac/wiki/SoftwareLogging

Installation: Copy entire plog directory to include path

Features:
    -- Header only with no external dependencies (light weight)
    -- Supports older compilers that are non-C++11 compliant
    -- Allows for thread safe logging (With modifications needed for older 
            Linux and Unix distros) (last evaluated Jan 2017)
    -- Allows for multiple logger objects to multiple locations
    -- Messages can be filtered by severity. This filter can be changed at run time.

Modifications for Legacy Support:
    Note: Modified plog classes can be found in directory: eewrt/libs/utils
    -- Added ExternalMutexConsoleAppender.h (Created by Garret Hartman on 08-01-2016)
    -- Added ExternalMutexRollingFileAppender.h (Created by Garret Hartman on 08-20-2016)
    -- Added SimpleFormatter.h for conlog support (Created by Claude Felizardo)

PLOG Components:
    -- Appenders: Are assigned to Loggers to perform the writing action of the logger. 
            These will determine how and where a log is written as well as place the time 
            stamp on each log entry. They are found in ./plog/Appenders/.
    -- Formatters: Are assigned to Loggers to specify the format of the log file. 
            Plog comes with a TxtFormatter and CsvFormatter found in ./plog/Formatters/. 
            Other formatters can be defined by extending the IFormatter interface.
    -- Loggers: Are the objects that combine the actions defined by Formatters and Appenders. 
            Loggers are easily addressed by the logger macros.

Usage:
    
    Includes:
    ---------------
        <-- BEGIN C++ CODE -->
        #include <plog/Log.h> //needed for init and log macros
        #include <plog/Appenders/ExternalMutexConsoleAppender.h> // needed to allow {DM|WP}Lib::printlock mutex
                                                                 // support when used along side plog

        #include <plog/Appenders/ExternalMutexConsoleAppender.h> // needed to allow {DM|WP}Lib::printlock mutex
                                                                 // support when used along side plog
        <-- END C++ CODE -->

    Initialize The Default Logger:
    ----------------------------------
        First create the Appender object which will be used by the logger to Append to console or file

        //For Console Logging
        static plog::ExternalMutexConsoleAppender<plog::TxtFormatter> my_console_appender;

        NOTE: A custom formatter can also be defined by overriding the plog::Formatter interface
        
        //For File Logging
        int my_file_size_in_bytes = 8000; //max log file size in bytes
        int my_file_count; //max number of log files to be generated
        static plog::ExternalMutexRollingFileAppender<plog::TxtFormatter> my_file_appender(
            "MyLog.txt", my_file_size_in_bytes, my_file_count);
        
        Initialization Example 1:
            //Initializing the default logger with a console appender
            plog::init(plog::verbose, &my_console_appender); //returns &plog::Logger
        
        Initialization Example 2 (adding two appenders to the default logger):
            plog::init(plog::verbose, &my_console_appender).addAppender(&my_file_appender);

    Initialize Multiple Loggers:
    -----------------------------------
        -- Logger objects are addressed to using enums evaluated to an integer. For example:
        
        <-- BEGIN C++ CODE -->

        //define anonymous enum defining enum values for different Logger objects
        /* NOTE: 0 is the defined by PLOG to be the 
         * default logger that is used when no enum is given
         * do NOT use the 0 as a custom value (or leave an enum value 
         * undefined as it will default to 0 in the compiler. */
        enum { 
            FOO_LOGGER = 1,
            BAR_LOGGER_TWO = 2,
            PAUL_BUNYAN = 3
        };
        
        //initialize logger objects, usually at the start of your program
        plog::init<FOO_LOGGER>(plog::debug, &my_console_appender);
        plog::init<BAR_LOGGER>(plog::verbose, &my_file_appender);
        plog::init<PAUL_BUNYAN>(plog::verbose, &my_console_appender);

        <-- END C++ CODE --> 

        -- Now when the loggers are written to in the next section FOO_LOGGER and PAUL_BUNYAN will both be 
        directed to console each having its own verbosity while BAR_LOGGER will write to a file called 
        "MyLog.txt" as defined in the last section.
        
    Write messages to logger using PLOG macros (defined in plog/Log.h)
    ---------------------------------------------------------------------        
        For quick log writing PLOG uses macros combined with a stream insertion operator overload for writing.
        
        Logging Example:
            LOG_INFO << "This message will be written to my log by the appender assigned to the default logger"

        Logging Example 2:
            LOGI << "This macro is equivalent to the one above"

        Logging Example 3:
            LOG_(MY_LOGGER, plog::debug) << "This will be sent to the appender " 
                                         << "assigned to the log object with the given enum."
            equivalent macro: LOGD_(MY_LOGGER) 

        Default Logger Macros: LOG_VERBOSE, LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR and LOG_FATAL

        Short Default Logger Macros: LOGV, LOGD, LOGI, LOGW, LOGE, LOGF
        
        Custom Logger 2 Argument Macro Functions: LOG_( [LOGGER_INSTANCE_ENUM] ,[VERBOSITY] )

    Changing Logger Max Severity At Run Time:
    -------------------------------------------
        Logger* myLogger = plog::init(plog::verbose, &my_console_appender); //create new log instance
        myLogger.setMaxSeverity(plog::debug); //sets new max severity on logger
